<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mhedit</name>
    </assembly>
    <members>
        <member name="M:mhedit.Context.ConvertVectorToPixels(System.Tuple{System.Int16,System.Int16})">
            <summary>
            Converts an Atari vector tuple into an editor
            surface coordinate.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.Context.ConvertPixelsToVector(System.Drawing.Point)">
            <summary>
            Converts an editor coordinate into an Atari coordinate.
            </summary>
            <param name="pixels"></param>
            <returns></returns>
        </member>
        <member name="F:mhedit.DialogMHPLogin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.DialogMHPLogin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.DialogMHPLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:mhedit.MazeEnemies.CannonMovementPreview.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.MazeEnemies.CannonMovementPreview.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.MazeEnemies.CannonMovementPreview.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.LightningV">
            <summary>
            The Lightning class shows the force fields in the maze. They will kill the player upon contact. 
            The Lightning objects have have either horizontal or vertical orientation.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.LightningH">
            <summary>
            The Lightning class shows the force fields in the maze. They will kill the player upon contact. 
            The Lightning objects have have either horizontal or vertical orientation.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.Maxoid">
            <summary>
            Pyroids are the common 'spark-like' enemies in the maze. They have a speed and velocity
            component and freeze when the reactoid is touched.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.TripPadPyroid">
            <summary>
            Pyroids are the common 'spark-like' enemies in the maze. They have a speed and velocity
            component and freeze when the reactoid is touched.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.Cannon">
            <summary>
            The Cannon class shows the Ion Cannon in the maze.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.Perkoid">
            <summary>
            The Perkoid class implements the common robots in the maze. Perkoids have a direction and
            velocity properties.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.Pyroid">
            <summary>
            Pyroids are the common 'spark-like' enemies in the maze. They have a speed and velocity
            component and freeze when the reactoid is touched.
            </summary>
        </member>
        <member name="T:mhedit.MazeEnemies.TripPad">
            <summary>
            TripPad objects are maze enemies that when stepped on by the player will launch a pyroid from 
            a predefined location at a specific speed and velocity.
            </summary>
        </member>
        <member name="F:mhedit.CannonMovementEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.CannonMovementEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.CannonMovementEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:mhedit.DialogAbout">
            <summary>
            Our lovely about box.
            </summary>
        </member>
        <member name="M:mhedit.DialogAbout.#ctor">
            <summary>
            Our default constructor for the About dialog.
            </summary>
        </member>
        <member name="F:mhedit.DialogAbout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.DialogAbout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.DialogAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:mhedit.DialogConfiguration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.DialogConfiguration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.DialogConfiguration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:mhedit.Mainform">
            <summary>
            The main application form.
            </summary>
        </member>
        <member name="F:mhedit.Mainform.MESSAGEBOX_CAPTION">
            <summary>
            This is the default caption for all message boxes in the application
            </summary>
        </member>
        <member name="M:mhedit.Mainform.#ctor">
            <summary>
            Our default constructor for the application mainform
            </summary>
        </member>
        <member name="F:mhedit.Mainform.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:mhedit.Mainform.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:mhedit.Mainform.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:mhedit.MazeType">
            <summary>
            MazeType defines the 4 basic mazes found in Major Havoc. The base dimensions and walls are different
            for each MazeType
            </summary>
        </member>
        <member name="F:mhedit.MazeType.TypeA">
            <summary>
            Type A Mazes are on levels 1,5,9,13,etc. This maze area is the smallest of the four
            and has a bounding grid of 16x7 stamps.
            </summary>
        </member>
        <member name="F:mhedit.MazeType.TypeB">
            <summary>
            Type B Mazes are on levels 2,6,10,14,etc. This maze area has a bounding grid of 21x8 stamps.
            </summary>
        </member>
        <member name="F:mhedit.MazeType.TypeC">
            <summary>
            Type C Mazes are on levels 3,7,11,15,etc. This maze area has a bounding grid of 21x9 stamps.
            </summary>
        </member>
        <member name="F:mhedit.MazeType.TypeD">
            <summary>
            Type D Mazes are on levels 4,8,12,16,etc. This maze area has a bounding grid of 19x11 stamps.
            </summary>
        </member>
        <member name="T:mhedit.Velocity">
            <summary>
            The velocity class contains both X and Y components of velocity
            </summary>
        </member>
        <member name="T:mhedit.SignedVelocity">
            <summary>
            The signed velocity class contains both X and Y components of velocity
            and is used exclusively for IonCannons
            </summary>
        </member>
        <member name="T:mhedit.Vector">
            <summary>
            The vector class contains a start and end point
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.ArrowDirection">
            <summary>
            ArrowDirection defines which way the current arrow is pointing. Unknown will display a question mark.
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.Right">
            <summary>
            Arrow pointing Right
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.Left">
            <summary>
            Arrow pointing Left
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.Up">
            <summary>
            Arrow pointing Up
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.Down">
            <summary>
            Arrow pointing Down
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.UpRight">
            <summary>
            Arrow pointing Up and to the Right
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.DownLeft">
            <summary>
            Arrow pointing Down and to the Left
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.UpLeft">
            <summary>
            Arrow pointing Up and to the Left
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.DownRight">
            <summary>
            Arrow pointing Down and to the Right
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ArrowDirection.Question">
            <summary>
            A question mark
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Arrow">
            <summary>
            Arrow objects are placed in the maze to give the player help in finding the correct way to the 
            reactoid. Arrows may also be placed to deceive the player.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Boots">
            <summary>
            Boots are a special gift in the maze, when the player is wearing the boots, they have the 
            ability to levitate in place by holding the jump button. 
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Clock">
            <summary>
            The clock object may be placed once in any maze. When triggered, maze enemies slow down.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Hand">
            <summary>
            The Hand may be placed on any maze. If it is not disabled by the player, it will automatically 
            turn off the reactoid if it is triggered.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Key">
            <summary>
            Keys are used to open locks of a matching color
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.Lock">
            <summary>
            Locks are not passable unless the player has a key of matching color.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.ObjectColor">
            <summary>
            The colors that are available for Lock and Key objects.
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Red2">
            <summary>
            Red2
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Whiter">
            <summary>
            Whiter
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Cyanr">
            <summary>
            Cyanr
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Bluer">
            <summary>
            Bluer
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.ObjectColor.Greenr">
            <summary>
            Greenr
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.OneWayDirection">
            <summary>
            The direction that a OneWay allows the player to pass.
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.OneWayDirection.Right">
            <summary>
            One Way Arrows allowing travel left to right
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.OneWayDirection.Left">
            <summary>
            One Way Arrows allowing travel right to left
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.OneWay">
            <summary>
            OneWay signs only allow the player to pass through in the direction specified.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.OxoidType">
            <summary>
            Oxoid type defines whether an oxoid point value is fixed or increases exponentially
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.OxoidType.Fixed">
            <summary>
            Fixed oxoids award 500 points
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.OxoidType.Increasing">
            <summary>
            Increasing oxoid points start at 200 and increase to 400, 600, 800, 1000, 1200
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.EscapePodOption">
            <summary>
            The EscapePodOption defines whether a player *must* use the escape pod to leave the maze
            or whether they may use the normal maze exits as well.
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.EscapePodOption.Optional">
            <summary>
            If Optional is selected, then the player may optionally use the Escape Pod to leave the 
            maze.
            </summary>
        </member>
        <member name="F:mhedit.MazeObjects.EscapePodOption.Required">
            <summary>
            If Required is selected, then the maze doors do not open when the reactoid is triggered 
            and the player must use the escape pod to leave the maze safely.
            </summary>
        </member>
        <member name="T:mhedit.MazeObjects.EscapePod">
            <summary>
            Escape pod may be placed on Type 2 mazes only. It allows the player an alternate 
            way to get out of the maze after touching the reactor.
            </summary>
        </member>
        <member name="T:mhedit.MazeWallType">
            <summary>
            Describes the different wall types available.
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.Horizontal">
            <summary>
            Horizontal Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.LeftDown">
            <summary>
            Left Down Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.LeftUp">
            <summary>
            Left Up Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.RightUp">
            <summary>
            Right Up Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.RightDown">
            <summary>
            Right Down Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.Vertical">
            <summary>
            Vertical Wall Type
            </summary>
        </member>
        <member name="F:mhedit.MazeWallType.Empty">
            <summary>
            Empty Wall Type 
            </summary>
        </member>
        <member name="M:mhedit.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:mhedit.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:mhedit.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:mhedit.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:mhedit.Properties.Resources.OpenSelectedItemHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:mhedit.TypeConverters.VectorPositionTypeConverter">
            <summary>
            The VectorPointTypeConverter allows the ProperyGrid to properly display Vector Position properties in the 
            PropertyGrid window.
            </summary>
        </member>
        <member name="M:mhedit.TypeConverters.VectorPositionTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VectorPositionTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VectorPositionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VectorPositionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VectorPositionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param> 
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:mhedit.TypeConverters.TripPadPyroidTypeConverter">
            <summary>
            The PyroidTypeConverter allows the ProperyGrid to properly display Pyroid properties in the 
            PropertyGrid window. this is only used in the TripPad object.
            </summary>
        </member>
        <member name="M:mhedit.TypeConverters.TripPadPyroidTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.TripPadPyroidTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.TripPadPyroidTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.TripPadPyroidTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.TripPadPyroidTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:mhedit.TypeConverters.SignedVelocityTypeConverter">
            <summary>
            The VelocityTypeConverter allows the ProperyGrid to properly display Velocity properties in the 
            PropertyGrid window.
            </summary>
        </member>
        <member name="M:mhedit.TypeConverters.SignedVelocityTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.SignedVelocityTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.SignedVelocityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.SignedVelocityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.SignedVelocityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:mhedit.TypeConverters.VelocityTypeConverter">
            <summary>
            The VelocityTypeConverter allows the ProperyGrid to properly display Velocity properties in the 
            PropertyGrid window.
            </summary>
        </member>
        <member name="M:mhedit.TypeConverters.VelocityTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VelocityTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VelocityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VelocityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:mhedit.TypeConverters.VelocityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:mhedit.mhedit_ws.Service">
            <remarks/>
        </member>
        <member name="M:mhedit.mhedit_ws.Service.#ctor">
            <remarks/>
        </member>
        <member name="E:mhedit.mhedit_ws.Service.LogExceptionCompleted">
            <remarks/>
        </member>
        <member name="M:mhedit.mhedit_ws.Service.LogException(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:mhedit.mhedit_ws.Service.LogExceptionAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:mhedit.mhedit_ws.Service.LogExceptionAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:mhedit.mhedit_ws.Service.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:mhedit.mhedit_ws.LogExceptionCompletedEventHandler">
            <remarks/>
        </member>
    </members>
</doc>
